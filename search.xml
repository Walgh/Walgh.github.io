<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>交换基础</title>
      <link href="posts/edee84da/"/>
      <url>posts/edee84da/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>典型的园区网分层结构如图所示，交换技术主要聚焦接入层</p><img src="/posts/edee84da/园区网分层结构.png" alt="园区网分层结构" style="zoom:60%;"><h2 id="1-1-交换机主要功能"><a href="#1-1-交换机主要功能" class="headerlink" title="1.1 交换机主要功能"></a>1.1 交换机主要功能</h2><ul><li>地址学习</li><li>转发和过滤数据帧</li><li>环路避免</li></ul><h2 id="1-2-MAC地址"><a href="#1-2-MAC地址" class="headerlink" title="1.2 MAC地址"></a>1.2 MAC地址</h2><ul><li>48位，通常被表示为点分十六进制数</li><li>前24位二进制表示供应商代码，剩余的24位由厂商自己分配</li><li>MAC地址全球唯一，由IEEE对这些地址进行管理和分配</li></ul><h2 id="1-3-交换寻址"><a href="#1-3-交换寻址" class="headerlink" title="1.3 交换寻址"></a>1.3 交换寻址</h2><img src="/posts/edee84da/交换寻址1.png" alt="交换寻址1" style="zoom:60%;"><p>假设交换机有E0(A)、E1(B)、E2(C)、E3(D)四个接口。交换机第一次工作时，初始化MAC地址表为空。当A发数据包给D时，交换机解出源MAC，并且知道数据包由哪个接口来，所以地址表中会加入E0及其对应的MAC地址，但此时它不知道目的MAC是哪个接口，所以它会广播该数据包，而B、C、D收到数据包后，只有D会回包，此时交换机就会添加E3及其对应的MAC地址，这就是交换机的学习过程。当A再次发送数据包给D时，由于MAC地址表已经存储了E3对应的MAC，此时交换机不会再广播该数据包，而是直接传至E3接口。</p><img src="/posts/edee84da/交换寻址2.png" alt="交换寻址2" style="zoom:60%;"><p>交换机还存在一个老化时间的概念，该值默认为300s。MAC地址表数据项的删除，会在两种情况下发生，<strong>其一</strong>是当某一设备拔掉时，交换机会立刻删除MAC表中该项，<strong>其二</strong>是当某一设备的老化时间计数达到阈值，交换机也会删除该项。</p><h1 id="2-VLAN技术"><a href="#2-VLAN技术" class="headerlink" title="2 VLAN技术"></a>2 VLAN技术</h1><h2 id="2-1-VLAN概述"><a href="#2-1-VLAN概述" class="headerlink" title="2.1 VLAN概述"></a>2.1 VLAN概述</h2><ul><li>分段性</li><li>灵活性</li><li>安全性</li></ul><img src="/posts/edee84da/某部门网络解决方案.png" alt="某部门网络解决方案" style="zoom:60%;">如图所示，某公司要求1、2、3层各部门网络设别分别属于不同广播域，图示解决方案是一层楼架设一个交换机，这样每一层属于一个网段，但此时成本较高，若某一层只有一到两台终端，不太经济，因此诞生了**VLAN技术**。VLAN技术从**软件层面**，将**交换机的接口**划分为不同的广播域。<p><strong>VLAN的特点：</strong></p><ul><li>一个VALN就是一个广播域，也就是一个逻辑子网(网段)</li><li>VLAN中成员多基于Switch端口号码，划分VLAN就是对Switch接口划分</li><li>VLAN工作于OSI模型第二层</li></ul><h2 id="2-2-创建VLAN"><a href="#2-2-创建VLAN" class="headerlink" title="2.2 创建VLAN"></a>2.2 创建VLAN</h2><ul><li><strong>创建VLAN信息</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash">Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># vlan 2              // 取值为1-4094</span>Switch<span class="token punctuation">(</span>config-vlan<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#name VLAN2</span>Switch<span class="token punctuation">(</span>config-vlan<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#exit            // 思科设备必须使用该命令退出，否则相当于未创建VLAN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建后可用<code>show vlan</code>查看创建结果</p><ul><li><strong>将端口划入特定的VLAN</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash">Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># interface fa0/1                // 进入该接口</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># switchport mode access      // 设置接口模式</span>Switch<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># switchport access [vlan vlan#|dynamic]   // 为接口指定VLAN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Tip:</strong> 1、access接口是二层接口，SVI接口是三层接口<br>       2、批量进入多个接口使用命令<code>interface range ethernet 0/0 -2(你想要的范围)</code>实现连续端口，或者使用命令<code>interface range ethernet 0/0,0/4</code>实现非连续端口</p></blockquote><h2 id="2-3-SVI-三层接口-的两种类型"><a href="#2-3-SVI-三层接口-的两种类型" class="headerlink" title="2.3 SVI(三层接口)的两种类型"></a>2.3 SVI(三层接口)的两种类型</h2><ul><li>主机管理接口，管理员可以利用该接口管理交换机</li><li>网关接口，用于三层交换机跨vlan间路由（具备路由功能），具体可以用<code>interface vlan</code>接口位置命令来创建svi，然后为其配置IP地址即可实现路由功能</li></ul><p><strong>二层(数据链路层)交换机和三层(网络层)交换机的区别：</strong></p><blockquote><p>三层交换机具备路由功能，可以配置IP</p></blockquote><h1 id="3-Trunk技术"><a href="#3-Trunk技术" class="headerlink" title="3 Trunk技术"></a>3 Trunk技术</h1><h2 id="3-1-Trunk的概念"><a href="#3-1-Trunk的概念" class="headerlink" title="3.1 Trunk的概念"></a>3.1 Trunk的概念</h2><img src="/posts/edee84da/Trunk.png" alt="Trunk" style="zoom:60%;">**给不同的VLAN做上不同的标记，类似于通信中的复用**<h2 id="3-2-802-1Q"><a href="#3-2-802-1Q" class="headerlink" title="3.2 802.1Q"></a>3.2 802.1Q</h2><img src="/posts/edee84da/802.1Q帧结构.png" alt="802.1Q帧结构" style="zoom:60%;"><blockquote><p>**Tip: **其中Native VLAN为本征VLAN，默认为vlan1</p></blockquote><h2 id="3-3-Trunk的基本配置"><a href="#3-3-Trunk的基本配置" class="headerlink" title="3.3 Trunk的基本配置"></a>3.3 Trunk的基本配置</h2><ul><li><p><strong>配置Trunk封装模式</strong></p><pre class="line-numbers language-bash"><code class="language-bash">interface f0/15switchport trunk encapsulation <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;isl|dot1q&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>**Tip: **isl模式不用，只用dot1q</p></blockquote></li><li><p><strong>开启端口trunk模式</strong></p><pre class="line-numbers language-bash"><code class="language-bash">switchport mode<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;dynamic&amp;#123;auto|desirable&amp;#125;|trunk&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>常用命令</strong></p><pre class="line-numbers language-bash"><code class="language-bash">switchport trunk allowed vlan 10        // 只允许vlan10使用trunkswitchport trunk allowed vlan add 20    // 添加允许vlan20使用trunkswitchport trunk allowed vlan remove 10 // 删除vlan10使用trunkswitchport trunk allowed vlan all       // 放行所有vlanswitchport trunk native vlan 10            // 修改本征vlan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-VTP-VLAN-Trunking-Protocol"><a href="#4-VTP-VLAN-Trunking-Protocol" class="headerlink" title="4 VTP(VLAN Trunking Protocol)"></a>4 VTP(VLAN Trunking Protocol)</h1></li><li><p>一个能够宣告VLAN配置信息的信息系统；</p></li><li><p>通过一个共有的管理域，维持VLAN配置信息的一致性</p></li><li><p>VTP只能在主干端口发送要宣告的信息</p></li><li><p>支持混合的介质主干连接(快速以太网，FDDI，ATM)</p></li></ul><h2 id="4-1-VTP模式"><a href="#4-1-VTP模式" class="headerlink" title="4.1 VTP模式"></a>4.1 VTP模式</h2><img src="/posts/edee84da/VTP模式.png" alt="VTP模式" style="zoom:60%;">## 4.2 VTP的配置```bashSwitch# configure terminalSwitch(config)# vtp mode[server|client|transparent]Switch(config)# vtp domain domain-nameSwitch(config)# vtp password passwordSwitch(config)# vtp pruning   // vtp修剪Switch(config)# vtp version 2 // 版本由1-3,常用2```&gt;**Tips:** 1、默认情况：VTP模式为server&gt;          2、VTP域名对大小写敏感&gt;          3、VTP密码对大小写敏感&gt;          4、VTP修剪默认关闭]]></content>
      
      
      <categories>
          
          <category> CCNA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCNA </tag>
            
            <tag> VLAN </tag>
            
            <tag> SVI接口 </tag>
            
            <tag> Trunk </tag>
            
            <tag> VTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客新建文章自动打开markdown编辑器</title>
      <link href="posts/dfb97fe6/"/>
      <url>posts/dfb97fe6/</url>
      
        <content type="html"><![CDATA[<p>日常进行博文撰写时，如果采用<code>hexo new 文章名</code>的方式新建文章，需要手动去博客目录下去打开对应的<code>.md</code>文件，当博文体量上来后，这一操作十分不便，因此，有必要将这一步操作实现自动化。</p><blockquote><p><strong>解决办法</strong>：在博客根目录下新建<code>scripts</code>目录，并在新建目录下新建<code>auto_open.js</code></p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "你的markdown编辑器的绝对路径" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以后新建文章后均会自动打开编辑器。</p><blockquote><p>本文参考<a href="https://yafine-blog.cn/posts/d17e.html">过客～励む！</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文章中插入本地图片的解决办法</title>
      <link href="posts/a89fb9b6/"/>
      <url>posts/a89fb9b6/</url>
      
        <content type="html"><![CDATA[<ol><li>首先，需要将站点配置文件中的<code>post_asset_folder</code>设置为<code> true</code></li><li>在站点根目录下运行Git命令行窗口，输入<code>npm install hexo-asset-image –save</code>来安装一个上传本地图片的插件</li><li>插件安装完毕后，使用<code>hexo new 文章名</code>生成新文章时，除了生成<code>.md</code>文件后，还会生成一个同名的文件夹，采用该文件夹来存储你博文中需要使用的图片</li></ol><img src="/posts/a89fb9b6/微信图片_20201121131716.png" style="zoom:60%;"><ol start="4"><li>在你文章需要引用图片的地方采用markdown语言对图片进行引用，如本文示例：</li></ol><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token url">![你想输入的替代文字，就是图的标题](Hexo文章中插入本地图片的解决办法\XXX.jpg)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时可以看到效果图如下所示：</p><img src="/posts/a89fb9b6/２.png" style="zoom:60%;"><p>你以为这样就没问题了，实际上该种方法在部署后是无法显示图片的，不相信，你可以尝试一下</p><p>那么正确的解决姿势是怎样的呢？经过笔者实践，只有采用标签方式嵌入才能正常显示，废话不说，直接上代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hexo文章中插入本地图片的解决办法\XXX.png<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">60%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在你文章中需要引用图片的地方，插入上述代码即可正常在网页显示。如果你使用的Typora编辑器进行文章撰写，那么这个代码不需要你自己书写，你只需要点击菜单栏的格式-图像-插入本地图片后，选择缩放比例，它会自动替你生成，然后千万记住在生成代码后，加路径删除多余的部分，只留下<strong>你文章名字命名的文件夹\XXX.jpg</strong></p><blockquote><p><strong>注：</strong>如果上述方式你不够喜欢的话，你也可以采用CDN引用的方式将图片地址直接拿来引用，当然这就需要你将图片上传了，选择一个合适的图床工具也比较重要，这里推荐 PicGo图床服务，他可以采用github和gitee作为你图片的存储仓库，还可以集成到Typora中，相当好用，具体使用方法，请自行百度食用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 插入图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设备基本管理</title>
      <link href="posts/8ea9b4cd/"/>
      <url>posts/8ea9b4cd/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><h2 id="1-1-路由器组件"><a href="#1-1-路由器组件" class="headerlink" title="1.1 路由器组件"></a>1.1 路由器组件</h2><img src="/posts/8ea9b4cd/路由器组件.PNG" alt="路由器组件" style="zoom:60%;"><h2 id="1-2-路由器的组成及功能"><a href="#1-2-路由器的组成及功能" class="headerlink" title="1.2 路由器的组成及功能"></a>1.2 路由器的组成及功能</h2><img src="/posts/8ea9b4cd/路由器组成及功能.PNG" alt="路由器组成及功能" style="zoom:60%;"><h2 id="1-3-Cisco路由器的启动步骤"><a href="#1-3-Cisco路由器的启动步骤" class="headerlink" title="1.3 Cisco路由器的启动步骤"></a>1.3 Cisco路由器的启动步骤</h2><h2 id="1-4-Cisco设备管理"><a href="#1-4-Cisco设备管理" class="headerlink" title="1.4 Cisco设备管理"></a>1.4 Cisco设备管理</h2><p>通过多种方法访问CLI环境，常用的方法有：</p><ul><li><p>控制台</p></li><li><p>Telnet或SSH</p></li><li><p>辅助端口</p></li></ul><h2 id="1-5-机柜"><a href="#1-5-机柜" class="headerlink" title="1.5 机柜"></a>1.5 机柜</h2><ul><li><p>网络机柜标准为42U</p></li><li><p>1U= 4.445cm</p></li></ul><h2 id="1-6-Cisco-IOS软件映像文件命名规则"><a href="#1-6-Cisco-IOS软件映像文件命名规则" class="headerlink" title="1.6 Cisco IOS软件映像文件命名规则"></a>1.6 Cisco IOS软件映像文件命名规则</h2><p><font color="black">c3660</font>-<font color="red">jk9o3s</font>-<font color="blue">mz</font>. <font color="#00ffff">124-15.T5</font></p><blockquote><p><font color="black">(1) 硬件平台</font></p></blockquote><blockquote><p><font color="red">(2) 特性集</font></p></blockquote><blockquote><p><font color="blue">(3) 运行方式</font></p></blockquote><blockquote><p><font color="#00ffff">(4) 版本号</font></p></blockquote><h2 id="1-7-产品包"><a href="#1-7-产品包" class="headerlink" title="1.7 产品包"></a>1.7 产品包</h2><img src="/posts/8ea9b4cd/产品包.PNG" alt="产品包" style="zoom:60%;"><h1 id="2-Cisco-IOS配置管理"><a href="#2-Cisco-IOS配置管理" class="headerlink" title="2 Cisco IOS配置管理"></a>2 Cisco IOS配置管理</h1><h2 id="2-1-show命令"><a href="#2-1-show命令" class="headerlink" title="2.1 show命令"></a>2.1 show命令</h2><ul><li>最基本的检查命令</li><li>可使用show命令来获得可在当前上下文或模式下使用的命令的列表</li></ul><img src="/posts/8ea9b4cd/show命令.PNG" alt="show命令" style="zoom:60%;"><h2 id="2-2-配置主机名"><a href="#2-2-配置主机名" class="headerlink" title="2.2 配置主机名"></a>2.2 配置主机名</h2><ul><li>采用hostname “名字”</li></ul><h2 id="2-3-限制设备访问—配置口令和使用标语"><a href="#2-3-限制设备访问—配置口令和使用标语" class="headerlink" title="2.3 限制设备访问—配置口令和使用标语"></a>2.3 限制设备访问—配置口令和使用标语</h2><ul><li>使能口令——enable “password”</li><li>使能加密口令——enable secret “password”</li><li>控制台口令——line console “编号”，再设置password</li><li>VTY口令——line vty “编号”，再设置password</li></ul><h2 id="2-4-配置接口"><a href="#2-4-配置接口" class="headerlink" title="2.4 配置接口"></a>2.4 配置接口</h2><img src="/posts/8ea9b4cd/配置接口.PNG" alt="配置接口" style="zoom:60%;">]]></content>
      
      
      <categories>
          
          <category> CCNA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCNA </tag>
            
            <tag> 网络设备管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+gitee搭建自己的博客以及那些踩过的坑儿</title>
      <link href="posts/295e0edf/"/>
      <url>posts/295e0edf/</url>
      
        <content type="html"><![CDATA[<h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h1><blockquote><ul><li>Git</li><li>Node.js</li><li>编辑器Visual Studio Code、Sublime Text、Notepad++等</li><li>具体安装方法不再赘述</li></ul></blockquote><h1 id="2-Git用户名和邮箱的配置"><a href="#2-Git用户名和邮箱的配置" class="headerlink" title="2 Git用户名和邮箱的配置"></a>2 Git用户名和邮箱的配置</h1><p>鼠标右键点击<code>Git Bash Here</code></p><p>然后输入如下命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"此处填写你注册时的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"此处填写你注册时的邮箱"</span><span class="token comment" spellcheck="true"># 一般只要不报错，可以跳过下面寻找.gitconfig文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后找到<code>.gitconfig</code> 文件，文件存放位置在 <code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><img src="/posts/295e0edf/git配置.png" alt="git配置" style="zoom:100%;"><h1 id="3-Hexo博客框架的安装"><a href="#3-Hexo博客框架的安装" class="headerlink" title="3 Hexo博客框架的安装"></a>3 Hexo博客框架的安装</h1><p>首先在本地磁盘新建一个文件夹(如MyBlog)作为自己的博客文件的存储仓库，在该目录下点击鼠标右键，选择<code>Git Bash Here</code>，然后依次输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hexo框架的安装</span><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token comment" spellcheck="true"># 等上一个命令完成后，在输入下面的命令</span>hexo init<span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true"># 安装博客所需要的依赖文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等待所有命令都执行完毕，此时就可以愉快地使用Hexo三连</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clhexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打开浏览器，输入<a href="http://localhost:4000/">http://localhost:4000</a> ，出现以下界面，说明Hexo博客已经成功在本地运行</p><img src="/posts/295e0edf/初始博客界面.png" alt="初始博客界面" style="zoom:80%;"><h1 id="4-主题的安装与个性化修改"><a href="#4-主题的安装与个性化修改" class="headerlink" title="4 主题的安装与个性化修改"></a>4 主题的安装与个性化修改</h1><blockquote><p>本部分撰写转自：<strong>hexo-theme-matery官方文档</strong></p></blockquote><h2 id="4-1-主题下载及安装"><a href="#4-1-主题下载及安装" class="headerlink" title="4.1 主题下载及安装"></a>4.1 主题下载及安装</h2><p>我选用的主题是hexo-theme-matery，可以直接在官网下载master分支的最新稳定版代码，解压缩后放置在Hexo博客目录下的themes文件夹内，当然也可以采用<code>git clone</code>命令进行下载</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery themes/matery   <span class="token comment" spellcheck="true"># 稳定版</span><span class="token function">git</span> clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   <span class="token comment" spellcheck="true">#最新版(不定期进行优化更新)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-2-主题的配置"><a href="#4-2-主题的配置" class="headerlink" title="4.2 主题的配置"></a>4.2 主题的配置</h2><blockquote><p>首先需要明白两个文件的概念，一个是站点配置文件，在站点根目录下的<code>_config.yml</code>文件，一个是主题配置文件，在你安装的主题文件夹下的<code>_config.yml</code>文件</p></blockquote><h3 id="4-2-1-主题切换"><a href="#4-2-1-主题切换" class="headerlink" title="4.2.1 主题切换"></a>4.2.1 主题切换</h3><p>下载好主题后，将站点配置文件中的<code>theme</code>值换成你下载的主题名。<br>关于站点配置文件的其他修改项：</p><blockquote><p>语言修改: <code>language: zh-CN</code><br>网址修改：<code>url: 你的博客网址，等后续介绍完博客的部署后再填入 每页展示文章数量: </code>per_page: 建议为6的倍数，适配性最好</p></blockquote><h3 id="4-2-2-新建分类-categories-页"><a href="#4-2-2-新建分类-categories-页" class="headerlink" title="4.2.2 新建分类 categories 页"></a>4.2.2 新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-3-新建标签-tags-页"><a href="#4-2-3-新建标签-tags-页" class="headerlink" title="4.2.3 新建标签 tags 页"></a>4.2.3 新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-4-新建关于我-about-页"><a href="#4-2-4-新建关于我-about-页" class="headerlink" title="4.2.4 新建关于我 about 页"></a>4.2.4 新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-5-新建留言板-contact-页（可选的）"><a href="#4-2-5-新建留言板-contact-页（可选的）" class="headerlink" title="4.2.5 新建留言板 contact 页（可选的）"></a>4.2.5 新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="4-2-6-新建友情链接-friends-页（可选的）"><a href="#4-2-6-新建友情链接-friends-页（可选的）" class="headerlink" title="4.2.6 新建友情链接 friends 页（可选的）"></a>4.2.6 新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-7-新建-404-页"><a href="#4-2-7-新建-404-页" class="headerlink" title="4.2.7 新建 404 页"></a>4.2.7 新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个<br>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-菜单导航配置"><a href="#4-3-菜单导航配置" class="headerlink" title="4.3 菜单导航配置"></a>4.3 菜单导航配置</h2><h3 id="4-3-1-配置基本菜单导航的名称、路径url和图标icon"><a href="#4-3-1-配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="4.3.1 配置基本菜单导航的名称、路径url和图标icon."></a>4.3.1 配置基本菜单导航的名称、路径url和图标icon.</h3><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-二级菜单配置方法"><a href="#4-3-2-二级菜单配置方法" class="headerlink" title="4.3.2 二级菜单配置方法"></a>4.3.2 二级菜单配置方法</h3><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>(1).在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>(2).在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>(3).注意每个二级菜单模块前要加 <code>-</code>.<br>(4).注意缩进格式  </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Musics        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-代码高亮"><a href="#4-4-代码高亮" class="headerlink" title="4.4 代码高亮"></a>4.4 代码高亮</h2><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能的<strong>坑一</strong>，笔者安装完后并没有理想中的高亮效果，后来百度得到一种解决方案，输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-inject -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5-搜索"><a href="#4-5-搜索" class="headerlink" title="4.5 搜索"></a>4.5 搜索</h2><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>坑二</strong>：笔者在安装完搜索插件后，发现搜索在首页可以正常工作，但在其他页面搜索时，搜索得到的子URL直接拼接在了当前页面的URL之后，结果导致访问404，如图所示：</p><img src="/posts/295e0edf/搜索bug.PNG" alt="搜索bug" style="zoom:60%;"><p>经百度以及和群友交流后，得到一种解决方案，是在search.js中将其中一句代码作以下修改</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">-</span>str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;li&gt;&lt;a href='"</span> <span class="token operator">+</span> data_url <span class="token operator">+</span> <span class="token string">"' class='search-result-title'&gt;"</span> <span class="token operator">+</span> data_title <span class="token operator">+</span> <span class="token string">"&lt;/a&gt;"</span><span class="token punctuation">;</span> <span class="token operator">+</span>str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;li&gt;&lt;a href='/"</span> <span class="token operator">+</span> data_url <span class="token operator">+</span> <span class="token string">"' class='search-result-title'&gt;"</span> <span class="token operator">+</span> data_title <span class="token operator">+</span> <span class="token string">"&lt;/a&gt;"</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-6-中文链接转拼音（建议安装）"><a href="#4-6-中文链接转拼音（建议安装）" class="headerlink" title="4.6 中文链接转拼音（建议安装）"></a>4.6 中文链接转拼音（建议安装）</h2><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。<br>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><p>笔者推荐采用后者，可以生成永久短链接。<br>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，作以下修改：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.html  <span class="token comment" spellcheck="true"># 此处可以自己设置，也可以直接使用 /:abbrlink  posts也可改也可以去掉</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>    <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32   <span class="token comment" spellcheck="true">#算法： crc16(default) and crc32</span>    <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex     <span class="token comment" spellcheck="true">#进制： dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成完后，原md文件的Front-matter 内会增加abbrlink 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p><h2 id="4-7-文章字数统计插件（建议安装）"><a href="#4-7-文章字数统计插件（建议安装）" class="headerlink" title="4.7 文章字数统计插件（建议安装）"></a>4.7 文章字数统计插件（建议安装）</h2><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。<br>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-8-添加emoji表情支持（可选的）"><a href="#4-8-添加emoji表情支持（可选的）" class="headerlink" title="4.8 添加emoji表情支持（可选的）"></a>4.8 添加emoji表情支持（可选的）</h2><p>matery主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-9-添加-RSS-订阅支持（可选的）"><a href="#4-9-添加-RSS-订阅支持（可选的）" class="headerlink" title="4.9 添加 RSS 订阅支持（可选的）"></a>4.9 添加 RSS 订阅支持（可选的）</h2><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h2 id="4-10-添加-DaoVoice-在线聊天功能（可选的）"><a href="#4-10-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="4.10 添加 DaoVoice 在线聊天功能（可选的）"></a>4.10 添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h2><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h2 id="4-11-添加-Tidio-在线聊天功能（可选的）"><a href="#4-11-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="4.11 添加 Tidio 在线聊天功能（可选的）"></a>4.11 添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h2><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h2 id="4-12-修改页脚"><a href="#4-12-修改页脚" class="headerlink" title="4.12 修改页脚"></a>4.12 修改页脚</h2><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h2 id="4-13-修改社交链接"><a href="#4-13-修改社交链接" class="headerlink" title="4.13 修改社交链接"></a>4.13 修改社交链接</h2><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">&amp;#123;</span> <span class="token attr-name">%</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">&gt;</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;</span> <span class="token attr-name">%</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote></li></ul><h2 id="4-14-修改打赏的二维码图片"><a href="#4-14-修改打赏的二维码图片" class="headerlink" title="4.14 修改打赏的二维码图片"></a>4.14 修改打赏的二维码图片</h2><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h2 id="4-15-配置音乐播放器（可选的）"><a href="#4-15-配置音乐播放器（可选的）" class="headerlink" title="4.15 配置音乐播放器（可选的）"></a>4.15 配置音乐播放器（可选的）</h2><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841     </span><span class="token comment" spellcheck="true"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false      </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="4-16-文章-Front-matter-介绍"><a href="#4-16-文章-Front-matter-介绍" class="headerlink" title="4.16 文章 Front-matter 介绍"></a>4.16 文章 Front-matter 介绍</h2><h3 id="4-16-1-Front-matter-选项详解"><a href="#4-16-1-Front-matter-选项详解" class="headerlink" title="4.16.1 Front-matter 选项详解"></a>4.16.1 Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="4-16-2-最简示例"><a href="#4-16-2-最简示例" class="headerlink" title="4.16.2 最简示例"></a>4.16.2 最简示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-07 19:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-16-3-最全示例"><a href="#4-16-3-最全示例" class="headerlink" title="4.16.3 最全示例"></a>4.16.3 最全示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-07 19:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> walgh<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-博客部署到gitee"><a href="#5-博客部署到gitee" class="headerlink" title="5 博客部署到gitee"></a>5 博客部署到gitee</h1><p>(1).首先安装发布插件，在Git的命令行中执行以下命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2).然后去码云官网注册一个自己的账号，并新建一个仓库存储博客生成的页面，这里推荐<strong>仓库名字与码云名字一致</strong>，否则后续会有麻烦，如图所示</p><img src="/posts/295e0edf/码云仓库.png" alt="码云仓库" style="zoom:60%;"><blockquote><p><strong>需要注意的是：新建仓库必须选择公开</strong></p></blockquote><p>(3).添加公钥</p><blockquote><p>点击管理 —&gt; 部署公钥管理 —&gt; 新增部署公钥，添加公钥的内容也是之前部署到 GitHub 上添加的公钥</p></blockquote><img src="/posts/295e0edf/ssh.png" alt="ssh" style="zoom:60%;"><p>ssh添加方法:</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入后一直回车，然后在 C:/Users/[username] 目录下找到名为.ssh 的文件夹， 文件夹内会有两个文件，一个 id_rsa.pub 一个 id_rsa，用文本编辑器打开 id_rsa.pub，复制里面的的内容。 然后打开 Gitee，在添加部署公钥页面将复制的内容填入key</p><p>然后回到 Git 的命令行界面，测试一下是否与 Gitee 连接成功。输入下面的命令行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击回车，然后会出现一个询问内容，输入 <code>yes</code>，回车，会出现一段内容，<code>Hi XXX (DeployKey)! You've successfully authenticated, but GITEE.COM does not provide shell access.</code>。 说明连接成功。此处这个 <code>XXX</code> 应该是你 Gitee 的用户名。</p><p>打开项目，复制项目地址，如图所示：</p><img src="/posts/295e0edf/项目地址.png" alt="项目地址" style="zoom:60%;"><p>打开博客配置文件，找到deploy，在deploy下的repository加入刚刚复制的项目地址，我采用的是https，你可以根据实际决定采用https还是ssh。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/walgh/walgh.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后执行部署的Hexo三连</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clhexo ghexo d<span class="token comment" spellcheck="true"># 或者用 hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然到这里还没有结束，gitee还需要手动部署pages</p><img src="/posts/295e0edf/部署.png" alt="部署" style="zoom:60%;"><p>直到出现以下界面才算部署成功</p><img src="/posts/295e0edf/部署成功界面.png" alt="部署成功界面" style="zoom:60%;"><h1 id="6-自己脑残出现的问题，记录一下"><a href="#6-自己脑残出现的问题，记录一下" class="headerlink" title="6 自己脑残出现的问题，记录一下"></a>6 自己脑残出现的问题，记录一下</h1><p>该问题是TOC目录问题</p><p>笔者写好博客后，发现部署后，TOC目录出现以下问题(实际上是有大纲的)</p><img src="/posts/295e0edf/TOC目录错误.PNG" alt="TOC目录错误" style="zoom:60%;"><p>后来发现是主题配置文件中TOC目录默认不解析一级标题，源代码如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">toc</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">heading</span><span class="token punctuation">:</span> h2<span class="token punctuation">,</span> h3<span class="token punctuation">,</span> h4  <span class="token key atrule">collapseDepth</span><span class="token punctuation">:</span> <span class="token number">0 </span><span class="token comment" spellcheck="true"># 目录默认展开层级</span>  <span class="token key atrule">showToggleBtn</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否显示切换TOC目录展开收缩的按钮</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将代码更改为如下所示即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">toc</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">heading</span><span class="token punctuation">:</span> h1<span class="token punctuation">,</span> h2<span class="token punctuation">,</span> h3<span class="token punctuation">,</span> h4  <span class="token key atrule">collapseDepth</span><span class="token punctuation">:</span> <span class="token number">0 </span><span class="token comment" spellcheck="true"># 目录默认展开层级</span>  <span class="token key atrule">showToggleBtn</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否显示切换TOC目录展开收缩的按钮</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确的TOC目录结果：</p><img src="/posts/295e0edf/TOC目录正确.PNG" alt="TOC目录正确" style="zoom:60%;">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP子网规划</title>
      <link href="posts/5ee816e0/"/>
      <url>posts/5ee816e0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1 IP地址"></a>1 IP地址</h1><ul><li>网络层概念</li><li>主机唯一的标志，保证主机间正常通信</li><li>IPv4地址由32bit组成</li></ul><h1 id="2-IP地址分类"><a href="#2-IP地址分类" class="headerlink" title="2 IP地址分类"></a>2 IP地址分类</h1><ul><li>IP地址共分A|B|C|D|E5个类别</li></ul><img src="/posts/5ee816e0/IP地址分类.PNG" alt="IP地址分类" style="zoom:60%;"><h2 id="2-1-特殊IPv4地址"><a href="#2-1-特殊IPv4地址" class="headerlink" title="2.1 特殊IPv4地址"></a>2.1 特殊IPv4地址</h2><ul><li>网络地址和广播地址</li><li>默认路由：0.0.0.0</li><li>环回地址：127.0.0.0/8 用于测试</li><li>链路本地地址：169.254.0.0/16 Windows</li><li>TEST-NET地址：192.0.2.0/24 保留地址</li></ul><h1 id="3-IP地址的组成"><a href="#3-IP地址的组成" class="headerlink" title="3 IP地址的组成"></a>3 IP地址的组成</h1><p><strong>IP地址由两部分组成</strong></p><ul><li>网络部分（NETWORK）</li><li>主机部分（HOST）</li></ul><img src="/posts/5ee816e0/IP地址组成.PNG" alt="IP地址组成" style="zoom:60%;"><img src="/posts/5ee816e0/IP地址分类2.PNG" alt="IP地址第二分类" style="zoom:60%;"><h1 id="4-子网掩码"><a href="#4-子网掩码" class="headerlink" title="4 子网掩码"></a>4 子网掩码</h1><ul><li>用来确定IP的网络地址</li><li>32个二进制位</li><li>IP地址中的网络部分用1表示，主机部分用0表示</li><li>IP地址和子网掩码作逻辑“与”运算得到网络地址</li></ul><h1 id="5-IPv4网络中的地址类型"><a href="#5-IPv4网络中的地址类型" class="headerlink" title="5 IPv4网络中的地址类型"></a>5 IPv4网络中的地址类型</h1><h2 id="5-1-网络地址"><a href="#5-1-网络地址" class="headerlink" title="5.1 网络地址"></a>5.1 网络地址</h2><p>指代网络的地址，在网络的IPv4地址范围内，最小地址保留为网络地址。此地址的主机部分的每一个主机位为0</p><h2 id="5-2-广播地址"><a href="#5-2-广播地址" class="headerlink" title="5.2 广播地址"></a>5.2 广播地址</h2><p>用于向网络中的所有主机发送数据的特殊地址。广播地址使用该网络范围内的最大地址。即主机部分的各比特位全部为1的地址。</p><h2 id="5-3-主机地址"><a href="#5-3-主机地址" class="headerlink" title="5.3 主机地址"></a>5.3 主机地址</h2><p>分配给网络中终端设备的地址</p><h1 id="6-划分子网"><a href="#6-划分子网" class="headerlink" title="6 划分子网"></a>6 划分子网</h1><p>子网划分：将网络划分为适当大小的多个子网</p><h2 id="6-1-为什么要划分子网？"><a href="#6-1-为什么要划分子网？" class="headerlink" title="6.1 为什么要划分子网？"></a>6.1 为什么要划分子网？</h2><ul><li>提供灵活的编制</li><li>便于管理</li><li>广播抑制</li><li>“借用”主机位来“制造”新的“网络”（网络位向主机位借位）</li></ul><h2 id="6-2-子网划分原理"><a href="#6-2-子网划分原理" class="headerlink" title="6.2 子网划分原理"></a>6.2 子网划分原理</h2><ul><li>IP地址经过一次子网划分后，被分成3个部分——网络位、子网位和主机位</li><li>子网数=2^n，其中n为子网部分位数</li><li>主机数=2^N-2，其中N为主机部分位数</li></ul>]]></content>
      
      
      <categories>
          
          <category> CCNA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP子网规划 </tag>
            
            <tag> CCNA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP-IP协议簇</title>
      <link href="posts/102a7a5d/"/>
      <url>posts/102a7a5d/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常见协议"><a href="#1-常见协议" class="headerlink" title="1 常见协议"></a>1 常见协议</h1><h2 id="1-1-常见协议"><a href="#1-1-常见协议" class="headerlink" title="1.1 常见协议"></a>1.1 常见协议</h2><img src="/posts/102a7a5d/常见协议.PNG" alt="常见协议" style="zoom:60%;"><h2 id="1-2-TCP头部"><a href="#1-2-TCP头部" class="headerlink" title="1.2 TCP头部"></a>1.2 TCP头部</h2><img src="/posts/102a7a5d/TCP头部.PNG" alt="TCP头部" style="zoom:60%;"><h1 id="2-三次握手"><a href="#2-三次握手" class="headerlink" title="2 三次握手"></a>2 三次握手</h1><ul><li>第一次：sender-&gt;reciever  发送SYN=1</li><li>第二次：reciever-&gt;sender  发送SYN=1 ACK=1</li><li>第+三次：sender-&gt;reciever  发送ACK=1<ul><li>ack = seq+1   小写ack确认序号</li></ul></li></ul><img src="/posts/102a7a5d/三次握手.PNG" alt="三次握手" style="zoom:60%;"><h1 id="3-滑动窗口"><a href="#3-滑动窗口" class="headerlink" title="3 滑动窗口"></a>3 滑动窗口</h1><p>reciever收到3个包将回传3个确认，sender知晓当前3个窗口空闲，继续发送3个包，避免网络拥堵</p><img src="/posts/102a7a5d/滑动窗口.PNG" alt="滑动窗口" style="zoom:60%;"><h1 id="4-四次挥手"><a href="#4-四次挥手" class="headerlink" title="4 四次挥手"></a>4 四次挥手</h1><ul><li>第一次：sender-&gt;reciever  发送FIN=1</li><li>第二次：reciever-&gt;sender  发送ACK=1</li><li>第三次：reciever-&gt;sender  发送FIN=1  因为此时sender虽然发起断开请求，但reciever不一定接收完数据，所以需要等待数据确认后由reciever向sender发送FIN=1</li><li>第四次：sender-&gt;reciever  发送ACK=1</li></ul><img src="/posts/102a7a5d/四次挥手.PNG" alt="四次挥手" style="zoom:60%;"><h1 id="5-端口号类型"><a href="#5-端口号类型" class="headerlink" title="5 端口号类型"></a>5 端口号类型</h1><img src="/posts/102a7a5d/端口类型.PNG" alt="端口类型" style="zoom:60%;"><h1 id="6-TCP数据段重组"><a href="#6-TCP数据段重组" class="headerlink" title="6 TCP数据段重组"></a>6 TCP数据段重组</h1><ul><li>使用序列号</li></ul><img src="/posts/102a7a5d/TCP数据段重组.PNG" alt="TCP数据段重组" style="zoom:60%;"><h1 id="7-UDP数据段重组"><a href="#7-UDP数据段重组" class="headerlink" title="7 UDP数据段重组"></a>7 UDP数据段重组</h1><img src="/posts/102a7a5d/UDP数据段重组.PNG" alt="UDP数据段重组" style="zoom:60%;"><h1 id="8-IP"><a href="#8-IP" class="headerlink" title="8 IP"></a>8 IP</h1><ul><li>有IPv4(32bit)和IPv6(128bit)</li><li>TTL值：生命周期，每经过一次路由-1，当TTL为0时丢弃该数据包</li></ul><img src="/posts/102a7a5d/IP报头.PNG" alt="IP报头" style="zoom:60%;"><h2 id="8-1-常见IP协议"><a href="#8-1-常见IP协议" class="headerlink" title="8.1 常见IP协议"></a>8.1 常见IP协议</h2><ul><li>ICMP(网际控制报文协议)：检测网络层的连通性，发送echo request，目标收到后，发送echo reply 常用命令有ping、traceroute</li></ul><img src="/posts/102a7a5d/ICMP.PNG" alt="ICMP" style="zoom:60%;"><ul><li>ARP(地址解析协议)：通过广播查询IP对应的MAC，有代理ARP和反向ARP</li></ul><h1 id="9-双绞线制作"><a href="#9-双绞线制作" class="headerlink" title="9 双绞线制作"></a>9 双绞线制作</h1><img src="/posts/102a7a5d/双绞线线序.PNG" alt="双绞线线序" style="zoom:60%;">]]></content>
      
      
      <categories>
          
          <category> CCNA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCNA </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础</title>
      <link href="posts/91149a63/"/>
      <url>posts/91149a63/</url>
      
        <content type="html"><![CDATA[<h1 id="1-网络基础"><a href="#1-网络基础" class="headerlink" title="1 网络基础"></a>1 网络基础</h1><h2 id="1-1-什么是网络"><a href="#1-1-什么是网络" class="headerlink" title="1.1 什么是网络"></a>1.1 什么是网络</h2><p>将多台计算机及其外部设备通过通信线路连接起来</p><img src="/posts/91149a63/网络.png" alt="什么是网络" style="zoom:60%;"><h2 id="1-2-网络设备"><a href="#1-2-网络设备" class="headerlink" title="1.2 网络设备"></a>1.2 网络设备</h2><img src="/posts/91149a63/网络设备图标.png" alt="网络设备图标" style="zoom:60%;"><h3 id="1-2-1-Hub-集线器"><a href="#1-2-1-Hub-集线器" class="headerlink" title="1.2.1 Hub(集线器)"></a>1.2.1 Hub(集线器)</h3><ul><li>优点：便宜</li><li>缺点：共享型，无法满足多人同时访问</li></ul><h3 id="1-2-2-交换机"><a href="#1-2-2-交换机" class="headerlink" title="1.2.2 交换机"></a>1.2.2 交换机</h3><p><strong>所有的接口在同一个广播域</strong></p><ul><li>优点：可实现多用户同时访问，支持全双工</li><li>缺点：共享型，无法满足多人同时访问</li><li>作用：终端用户设备的接入\基本的安全功能\广播域的隔离（VLAN） </li></ul><h3 id="1-2-3-路由器"><a href="#1-2-3-路由器" class="headerlink" title="1.2.3 路由器"></a>1.2.3 路由器</h3><ul><li>每一个接口是一个独立的广播域</li><li>优点：可搭建大型网络、安全性高</li><li>缺点：接口太少、价格太贵</li><li>作用：路由协议支持\路径选择\数据转发\广域网接入</li></ul><h3 id="1-2-4-TIPS"><a href="#1-2-4-TIPS" class="headerlink" title="1.2.4 TIPS"></a>1.2.4 TIPS</h3><h4 id="1-2-4-1传输类型："><a href="#1-2-4-1传输类型：" class="headerlink" title="1.2.4.1传输类型："></a>1.2.4.1传输类型：</h4><ul><li>单工(始终只能完成一个方向的数据传输)</li><li>半双工(同一时间只能完成一个方向的数据传输)</li><li>全双工(同一时间可以完成两个方向的数据传输)</li></ul><h4 id="1-2-4-2数据类型："><a href="#1-2-4-2数据类型：" class="headerlink" title="1.2.4.2数据类型："></a>1.2.4.2数据类型：</h4><ul><li>广播报文(单IP到所有IP)</li><li>单播报文(单IP到单IP)</li><li>组播报文(单IP到多IP，类似朋友圈的部分可见）</li></ul><h1 id="2-OSI七层模型"><a href="#2-OSI七层模型" class="headerlink" title="2 OSI七层模型"></a>2 OSI七层模型</h1><p>从下至上分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p><img src="/posts/91149a63/OSI.png" alt="OSI" style="zoom:60%;"><h2 id="2-1-应用层"><a href="#2-1-应用层" class="headerlink" title="2.1 应用层"></a>2.1 应用层</h2><p>为应用软件提供接口，使应用程序能够使用网络服务</p><ul><li>http(80)</li><li>https(443)</li><li>dns(53)</li><li>ftp(20/21)</li><li>smtp(25)</li><li>pop3(110)</li><li>telnet(23)<br>上述数字代表其端口号</li></ul><h2 id="2-2-表示层"><a href="#2-2-表示层" class="headerlink" title="2.2 表示层"></a>2.2 表示层</h2><ul><li>数据的解码和编码 </li><li>数据的加密和解密 </li><li>数据的压缩和解压缩</li></ul><h2 id="2-3-会话层"><a href="#2-3-会话层" class="headerlink" title="2.3 会话层"></a>2.3 会话层</h2><p>负责建立、管理和终止表示层实体之间的会话连接</p><h2 id="2-4-传输层-主要为TCP-UDP"><a href="#2-4-传输层-主要为TCP-UDP" class="headerlink" title="2.4 传输层(主要为TCP/UDP)"></a>2.4 传输层(主要为TCP/UDP)</h2><p>负责建立端到端的连接，保证报文在端到端之间的传输</p><h2 id="2-5-网络层"><a href="#2-5-网络层" class="headerlink" title="2.5 网络层"></a>2.5 网络层</h2><p>为网络设备提供逻辑地址</p><ul><li>进行路由选择、维护路由表</li><li>负责将分组数据从源端传输到目的端</li><li>代表：路由器</li></ul><h2 id="2-6-数据链路层-MAC"><a href="#2-6-数据链路层-MAC" class="headerlink" title="2.6 数据链路层(MAC)"></a>2.6 数据链路层(MAC)</h2><p>在不可靠的物理链路上，提供可靠的数据传输服务，把帧从一跳(结点)移动到另一帧（结点）</p><ul><li>组帧、物理编址、流量控制、差错控制、接入控制</li><li>代表：交换机</li></ul><h2 id="2-7-物理层"><a href="#2-7-物理层" class="headerlink" title="2.7 物理层"></a>2.7 物理层</h2><p>负责把逐个的比特从一跳(结点)移动到另一跳(结点)</p><ul><li>代表：集线器</li></ul><h1 id="3-数据的封装与解封装"><a href="#3-数据的封装与解封装" class="headerlink" title="3 数据的封装与解封装"></a>3 数据的封装与解封装</h1><img src="/posts/91149a63/数据封装.PNG" alt="数据封装" style="zoom:60%;"><img src="/posts/91149a63/数据解封装.PNG" alt="数据解封装" style="zoom:60%;"><h1 id="4-DoD-TCP-IP-模型"><a href="#4-DoD-TCP-IP-模型" class="headerlink" title="4 DoD(TCP/IP)模型"></a>4 DoD(TCP/IP)模型</h1><p>从下至上分别是网络访问层、Internet层、传输层、应用层</p><img src="/posts/91149a63/DoD.PNG" alt="DoD" style="zoom:60%;"><h1 id="5-网关"><a href="#5-网关" class="headerlink" title="5 网关"></a>5 网关</h1><p>广播域的进出口</p>]]></content>
      
      
      <categories>
          
          <category> CCNA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCNA </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态链接库</title>
      <link href="posts/29b48e9/"/>
      <url>posts/29b48e9/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DLL的创建"><a href="#1-DLL的创建" class="headerlink" title="1 DLL的创建"></a>1 DLL的创建</h1><h2 id="1-1-函数的导出"><a href="#1-1-函数的导出" class="headerlink" title="1.1 函数的导出"></a>1.1 函数的导出</h2><ul><li>方法1：在导出函数前面添加<strong>标识符</strong>：</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">_declspec（dllexport）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>方法2：将上述指令进行<strong>宏定义</strong></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> DLL_API _declspec（dllexport）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-2-类的导出"><a href="#1-2-类的导出" class="headerlink" title="1.2 类的导出"></a>1.2 类的导出</h2><p>在类名前加入宏定义 DLL_API</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DLL_API</span> XXCLASS<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若只需导出类中的某个函数，则可只在对应函数前加入修饰符、</p><p>调用方法均需要先对类进行实例化，且<strong>导出函数必须是public属性</strong></p><h2 id="1-3-支持MFC的DLL"><a href="#1-3-支持MFC的DLL" class="headerlink" title="1.3 支持MFC的DLL"></a>1.3 支持MFC的DLL</h2><h3 id="1-3-1-动态链接MFC"><a href="#1-3-1-动态链接MFC" class="headerlink" title="1.3.1 动态链接MFC"></a>1.3.1 动态链接MFC</h3><p>发布DLL时需提供MFC动态链接库</p><h3 id="1-3-2-静态链接MFC"><a href="#1-3-2-静态链接MFC" class="headerlink" title="1.3.2 静态链接MFC"></a>1.3.2 静态链接MFC</h3><p>发布时无需提供MFC动态链接库</p><h3 id="1-3-3-MFC扩展DLL"><a href="#1-3-3-MFC扩展DLL" class="headerlink" title="1.3.3 MFC扩展DLL"></a>1.3.3 MFC扩展DLL</h3><p>使用共享的MFC DLL，支持导出MFC类，而两种方式只支持导出自己编写的C++类</p><h1 id="2-DLL的调用"><a href="#2-DLL的调用" class="headerlink" title="2 DLL的调用"></a>2 DLL的调用</h1><h2 id="2-1-隐式加载"><a href="#2-1-隐式加载" class="headerlink" title="2.1 隐式加载"></a>2.1 隐式加载</h2><p><strong>方法1：</strong>使用<strong>extern关键字</strong>对引用函数进行外部声明 </p><p><strong>方法2：</strong>使用标识符——<strong>declspec（dllimport）</strong>对引用函数进行声明</p><p><strong>方法3：</strong>在发布DLL时提供头文件，头文件内包含导出函数、类（<strong>实际应用均应该这样</strong>）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifdef</span> DLL_API</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> DLL_API _declspec(dllimport)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>DLL_API <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DLL_API <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-显示加载"><a href="#2-2-显示加载" class="headerlink" title="2.2 显示加载"></a>2.2 显示加载</h2><ul><li><p>LoadLibary函数</p></li><li><p>FreeLibrary函数：释放该DLL</p></li></ul><h2 id="2-3-隐式和显示的区别"><a href="#2-3-隐式和显示的区别" class="headerlink" title="2.3 隐式和显示的区别"></a>2.3 隐式和显示的区别</h2><p>显示加载时在程序调用时才进行资源加载，而隐式加载则是在程序启动时就加载，当调用DLL过多时可能出现启动时间长，由于全程加载DLL，也会出现资源占用的情况，而且其实隐式加载也是采用LoadLibary函数这套机制。</p><h1 id="3-解决名字改编问题"><a href="#3-解决名字改编问题" class="headerlink" title="3 解决名字改编问题"></a>3 解决名字改编问题</h1><p>C++编译器在生成DLL时会对导出进行名字改编，且不同的编译器改编规则不同，因此需要加入限定符<strong>extern “C”</strong>，保证导出函数名称不发生变化</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifdef</span> DLL_API</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> DLL_API extern “C” _declspec(dllimport)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>DLL_API <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DLL_API <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缺点：</strong> <strong>无法导出类的成员函数</strong>，只能导出全局函数，且函数调用约定改变，仍会改编函数的名字，因此这种情况需要使用<strong>添加模块定义文件（.def）</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp">LIBRARY <span class="token function">DllName</span><span class="token punctuation">(</span>必须和生成的动态链接库名字匹配<span class="token punctuation">)</span>EXPORTS<span class="token function">funName1</span><span class="token punctuation">(</span>只需要函数名<span class="token punctuation">)</span>funName2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 动态链接库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UTF-8转宽字符</title>
      <link href="posts/3cfe74b4/"/>
      <url>posts/3cfe74b4/</url>
      
        <content type="html"><![CDATA[<p>写这个主要是记录一下两个函数功能</p><p>事情起源于对某答题系统实现自动获取答案功能</p><p>该答题系统采用TCP协议进行数据传输，通过wireshark抓包分析得出该答题系统的答案校验功能在客户端运行而非服务器端（也许是出于服务器无法承受多用户同时提交答案校验），服务器向客户端传输的TCP包中同时包含题目和答案，分别在对应的标签中，于是为自动获取答案创造了有利条件</p><p>数据获取可以通过winpcap开发包简单方便实现，于是利用该库写了一个dll（TCPCapture.dll）实现对指定服务器地址的指定协议数据包进行无间断抓取，提供给程序抓包线程调用</p><p>组报和报文解析单独开辟线程处理。提取答案时，由于字节流采用UTF-8编码，如何将中文显示到MFC对话框内，花费了一些时间研究。其实如果你是使用Python编程，会简单很多，Python支持指定编码方式解析字节流，提取标签内容可以采用正则表达式或者find函数对关键词搜索即可，但为了追求原汁原味和尽可能减少程序依赖库（其实是因为用惯了C++），我选择了自己编码解析（自己摧残自己）</p><img src="/posts/3cfe74b4/程序组成框图.bmp" alt="程序组成框图" style="zoom:60%;"><p>因为之前对字符编码方式不甚了解，所以在答案显示这一步花费了不少时间。BD了一圈，CSDN也晃悠了一圈，试验了好几段代码均以失败告终，最后还是找到了一段代码，避免以后走弯路，所以在这里写下来</p><pre class="line-numbers language-cpp"><code class="language-cpp">CString XXDlg<span class="token operator">::</span><span class="token function">UTF8ToUnicode</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> UTF8<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DWORD dwUnicodeLen<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//  转换后Unicode的长度</span>    TCHAR<span class="token operator">*</span> pwText<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//  保存Unicode的指针</span>    CString strUnicode              <span class="token comment" spellcheck="true">//  函数返回值</span>    <span class="token comment" spellcheck="true">//  获取转换后的长度并分配内存</span>    dwUnicodeLen <span class="token operator">=</span> <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_UTF8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UTF8<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pwText <span class="token operator">=</span> <span class="token keyword">new</span> TCHAR<span class="token punctuation">[</span>dwUnicodeLen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pwText<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>）；    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  转换为Unicode</span>    <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_UTF8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> UTF8<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pwText<span class="token punctuation">,</span> dwUnicodeLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  转换为CString</span>    strUnicode<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pwText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  清除内存</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pwText<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  返回值</span>    <span class="token keyword">return</span> strUnicode<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回过头来看其实并没有什么技术含量（所以总结下来教训就是：知识和经验不够带来的就是时间代价），主要就是用 MultiByteToWideChar()这个函数按指定编码规则（CP_UTF8说明这里是按UTF-8解码）实现多字节向宽字符转换</p><p>最后出于功能完整性以及用户体验性考虑（其实是懒）决定将答案自动复制到剪贴板，这样使用过程中就只需要粘贴了，也附上代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> XXDlg<span class="token operator">::</span><span class="token function">CopyToClipBoard</span><span class="token punctuation">(</span>CString str<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">OpenClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        LPSTR pBuf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        LPCTSTR pSrc <span class="token operator">=</span> <span class="token punctuation">(</span>LPCTSTR<span class="token punctuation">)</span> str<span class="token punctuation">;</span>        size_t nLen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">_tcslen</span><span class="token punctuation">(</span>pSrc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TCHAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">::</span><span class="token function">EmptyClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pBuf <span class="token operator">=</span> <span class="token punctuation">(</span>LPSTR<span class="token punctuation">)</span> <span class="token operator">::</span><span class="token function">GlobalAlloc</span><span class="token punctuation">(</span>GMEM_DDESHARE<span class="token punctuation">,</span> nLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>pBuf<span class="token punctuation">,</span> pSrc<span class="token punctuation">,</span> nLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">::</span><span class="token function">SetClipboardData</span><span class="token punctuation">(</span>CF_UNICODETEXT<span class="token punctuation">,</span> pBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">::</span><span class="token function">CloseClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_TMDA<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">SetWindowTextW</span><span class="token punctuation">(</span><span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"复制失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最近发现自己以前花时间搜索实现的代码，要么不知道放哪去了，要么不记得怎么使用了，所以决定简单记录一下用过的一些代码片段，方便以后需要的时候不用再花费时间去检索了</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符编码 </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
